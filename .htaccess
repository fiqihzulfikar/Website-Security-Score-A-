<IfModule mod_rewrite.c>
RewriteEngine On
RewriteBase /
RewriteRule ^index\.php$ - [L]
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule . /index.php [L]
</IfModule>

Header always set Access-Control-Allow-Origin: *
Header always set Access-Control-Allow-Origin: origin-list

# Redirect HTTPS
#<VirtualHost *:80>
#  ServerName example.com
#  Redirect permanent / https://example.com/
#</VirtualHost>
<VirtualHost *:443>
  ServerName example.com
  ServerAlias www.example.com
  Protocols h2 http/1.1
  # SSL Configuration
  # Other Apache Configuration
</VirtualHost>

# Cache results of a preflight request for 10 minutes:
Header always set Access-Control-Max-Age: 600

# Redirect HTTPS 
RewriteEngine On
RewriteCond %{HTTPS} off
RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]

# Redirect for site.example.org from http to https, using Apache
# this configuration requires mod_ssl, mod_socache_shmcb, mod_rewrite, and mod_headers
<VirtualHost *:80>
    RewriteEngine On
    RewriteCond %{REQUEST_URI} !^/\.well\-known/acme\-challenge/ 
    ServerName example.com
    Redirect 301 https://example.com
</VirtualHost>

# Pre-existing site that uses too much inline code to fix
# but wants to ensure resources are loaded only over https and disable plugins
# and images from same origin and imgur. Sites should aim for policies like this.
# if there is block access css and js source is in coop Cross-Origin-Opener-Policy (COOP) response header allows & Header always set Cross-Origin-Embedder-Policy: require-corp

# Website Audit https://gf.dev/website-audit

# Disable List Directories
# DISABLE DIRECTORY INDEXES
# Disable List index and size file
# HTTP Strict-Transport-Security
RewriteCond Strict-Transport-Security: max-age=63072000; includeSubDomains; preload
Header always set Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
#Header always set Strict-Transport-Security "max-age=63072000" env=HTTPS
Header always set X-Transaction: "f6244159a766721b" 
Header always set X-Ua-Compatible: "IE=10, chrome=1"
Header always set X-Fb-Debug: "19SZeRDIdqVchN/gJ3It6oo"

# New Rule Header Security Cross Origin
Header always set  Clear-Site-Data: "cookies"
Header always set Cross-Origin-Embedder-Policy: unsafe-none 
Header always set Cross-Origin-Opener-Policy: unsafe-none;report-to="coop_report"
Header always set Cross-Origin-Resource-Policy: cross-origin
Header always set cross-origin-embedder-policy-report-only require-corp;report-to="coep_report"

# Set Proxy Socket -  Proxy Server - Mod_Proxy
# Set Connetion Timeout
<Proxy "http://backend.example.com">
  ProxySet connectiontimeout=5 timeout=30
 # Worker Sharing
 ProxyPass "/apps" "http://backend.example.com/applogin" timeout=60
ProxyPass "/web" "http://backend.example.com/weblogin" timeout=10
</Proxy>

#Controlling Access to Your Proxy
<Proxy "*">
  Require ip 41.216.185.54
</Proxy>
# Protocol Adjustments 
<Location "/proxy/">
  ProxyPass "http://example.com:443/"
  SetEnv force-proxy-request-1.0 1
  SetEnv proxy-nokeepalive 1
</Location>

#ProxySet Directive
<Proxy "balancer://hotcluster">
    BalancerMember "http://www2.example.com:8080" loadfactor=1
    BalancerMember "http://www3.example.com:8080" loadfactor=2
    ProxySet lbmethod=bytraffic
</Proxy>

<Proxy "http://backend">
    ProxySet keepalive=On
    ProxySet "balancer://foo" lbmethod=bytraffic timeout=15
    ProxySet "ajp://backend:7001" timeout=15
</Proxy>

<Proxy "*">
ProxyRemote  "*"  "http://firewall.example.com:81"
NoProxy         ".example.com" "192.168.112.0/21"
ProxyDomain     ".example.com"
ProxyErrorOverride  On
ProxyErrorOverride  On 403 405 500 501 502 503 504
</Proxy>

<Location "/mirror/">
    ProxyPass "http://backend.example.com/"
</Location>

# This directive is only useful for Apache httpd proxy servers within intranets. The ProxyDomain directive specifies the default domain which the apache proxy server will belong to. 
#If a request to a host without a domain name is encountered, a redirection response to the same host with the configured Domain appended will be generated.
ProxyRemote  "*"  "http://firewall.example.com:81"
NoProxy         ".example.com" "10.130.1.0/21"
ProxyDomain     ".example.com"
# Set Proxy Socket -  Proxy Server - Mod_Proxy


# HTTP Public Key Pinning (HPKP) 
# https://scotthelme.co.uk/hardening-your-http-response-headers/#public-key-pinning
# https://scotthelme.co.uk/hpkp-http-public-key-pinning/
# Header HTTP Strict Transport Security (HSTS)
Header always set Public-Key-Pins "pin-sha256='47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU='; pin-sha256='Fr6xbtK3/jtqJekoTYXoJDt15QE4HD+GbxFUWmgtOhA='; pin-sha256='T7RDbsW5fbIf4lh85/W+aGoSwW14lEABlaXzGxyeJ7c='; includeSubdomains; max-age=31536000"   
Header always set Public-Key-Pins-Report-Only "pin-sha256='47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU='; pin-sha256='Fr6xbtK3/jtqJekoTYXoJDt15QE4HD+GbxFUWmgtOhA='; pin-sha256='T7RDbsW5fbIf4lh85/W+aGoSwW14lEABlaXzGxyeJ7c='; includeSubdomains; max-age=31536000"

# Set Cookie Flag
# Set cookie on html <httpCookies requireSSL="true" httpCookies="true">
Header set Set-Cookie: example.com=7733282
Header set Cookie: yummy_cookie=sinkom; tasty_cookie=ITServiceProvider
Header set Set-Cookie: flavor=sinkom; SameSite=Secure
Header set Set-Cookie: flavor=sinkom; SameSite=Lax
Header set Set-Cookie: id=sinkom; Expires=Fri, 31 Dec 9999 23:59:59 GMT; Secure; HttpsOnly
Header set Set-Cookie: mykey=myvalue; SameSite=Strict
Header set Set-Cookie: JSESSIONID=9G5NPF0K14FGFOQD286BJPW7BG7BQXX1; SameSite=Strict
Header set Set-Cookie: JSESSIONID=9G5NPF0K14FGFOQD286BJPW7BG7BQXX1; SameSite=Lax
# Session identifier cookie only accessible on this host that gets purged when the user closes their browser
Header set Set-Cookie: MOZSESSIONID=980e5da39d4b472b9f504cac9; Path=/; Secure; HttpOnly
# Session identifier for all example.org sites that expires in 30 days using the __Secure- prefix
# This cookie is not sent cross-origin, but is sent when navigating to any Mozilla site from another site
Header set Set-Cookie: __Secure-MOZSESSIONID=7307d70a86bd4ab5a00499762; Max-Age=2592000; Domain=example.com; Path=/; Secure; HttpOnly; SameSite=Lax
# Session identifier used for a secure site, such as bugzilla.example.org. It isn't sent from cross-origin
# requests, nor is it sent when navigating to bugzilla.example.org from another site. Used in conjunction with
# other anti-CSRF measures, this is a very strong way to defend your site against CSRF attacks.
Header set Set-Cookie: __Host-BMOSESSIONID=YnVnemlsbGE=; Max-Age=2592000; Path=/; Secure; HttpOnly; SameSite=Strict


# Protect Login 
RewriteEngine On
RewriteCond %{HTTP_HOST} =autodiscover.server1.https://example.com
RewriteRule ^ https://example.com/cgi-sys/autodiscover.cgi [P]
RewriteCond %{HTTP_HOST} =cpanel.server1.https://example.com
RewriteRule ^/(.*) /___proxy_subdomain_cpanel/$1 [PT]
ProxyPass "/___proxy_subdomain_cpanel" "https://example.com:2082" max=1 retry=0
RewriteCond %{HTTP_HOST} =cpanel.server1.https://example.com
RewriteRule ^/(.*) /___proxy_subdomain_cpanel/$1 [PT]
AuthDigestDomain "/private/" "https://example.com:2083/private/"
ProxyPass "/___proxy_subdomain_cpanel" "https://example.com:2083" max=1 retry=0
RewriteCond %{HTTP_HOST} =webdisk.server1.https://example.com
RewriteRule ^/(.*) /___proxy_subdomain_webdisk/$1 [PT]
ProxyPass "/___proxy_subdomain_webdisk" "https://example.com:2077" max=1 retry=0
RewriteCond %{HTTP_HOST} =webmail.server1.https://example.com
RewriteRule ^/(.*) /___proxy_subdomain_webmail/$1 [PT]
ProxyPass "/___proxy_subdomain_webmail" "https://example.com:2095" max=1 retry=0

RewriteCond %{HTTP_HOST} =cpanel.server1.https://example.com
RewriteRule ^/(.*) /___proxy_subdomain_cpanel/$1 [PT]
ProxyPass "/___proxy_subdomain_cpanel" "https://cpanel.example.com" max=1 retry=0
RewriteCond %{HTTP_HOST} =webmail.server1.https://example.com
RewriteRule ^/(.*) /___proxy_subdomain_webmail/$1 [PT]
ProxyPass "/___proxy_subdomain_webmail" "c" max=1 retry=0
RewriteCond %{HTTP_HOST} =webdisk.server1.https://example.com
RewriteRule ^/(.*) /___proxy_subdomain_webdisk/$1 [PT]
ProxyPass "/___proxy_subdomain_webdisk" "https://webdisk.example.com" max=1 retry=0
</VirtualHost>

 
# Authentication Digest Provider from network vpn
#<Location "/private/">
#    AuthType Digest
#    AuthName "private area"
    AuthDigestDomain "/private/" "https://example.com:2083"
    AuthDigestDomain "/private/" "https://example.com:2087"
    AuthDigestDomain "/private/" "https://example.com:2077"
    AuthDigestDomain "/private/" "https://example.com:2095"
    AuthDigestDomain "/private/" "https://cpanel.example.com"
    AuthDigestDomain "/private/" "https://webmail.example.com"
    AuthDigestDomain "/private/" "https://webdisk.example.com"
    AuthDigestDomain "/private/" "https://ftp.example.com"
#    AuthDigestProvider file
#    AuthDigestShmemSize 1000
    AuthUserFile "/web/auth/.digest_pw"
#    Require valid-user
#    AuthName "Restricted Resource"
#    AuthGroupFile "/web/groups"
#</Location>

# protect access from vpn network

RewriteOptions inherit

RewriteEngine on

RewriteCond %{HTTP_HOST} ^.*$
#RewriteRule ^register\/?(.*)$ "https\:\/\/babyfit\-organic\.com\/register\/register\.php$1" [R=301,L]
RewriteCond %{HTTPS} off
RewriteCond %{HTTP:X-Forwarded-SSL} !on
RewriteCond %{HTTP_HOST} ^tirtalawoffice\.com$ [NC]
RewriteCond %{HTTP_HOST} ^www\.tirtalawoffice\.com$
RewriteRule ^(.*)$ "https\:\/\/tirtalawoffice\.com\/$1" [R=301,L]
 <Directory /usr/local/apache2/htdocs/dontlistme>
  Options -Indexes
    IndexOptions -FancyIndexing
</Directory>

# EXPECT-CT Enforce 30 second
# Expect-CT # X-XSS-Protection
Header always set Expect-CT: enforce, max-age=30, report-uri="https://{$firewall}.example.com/r/d/ct/enforce"
Header always set Expect-CT: enforce, max-age=30, report-uri="http://{$firewall}.example.com/r/d/ct/enforce"
# Deny Direct File Download With .htaccess
#<FilesMatch "\.(flv|gif|ico|jpe|jpeg|jpg|mp3|mp4|png|pdf|swf|txt)$">
#    Order Allow,Deny
#    Deny from All



#Allow Google Analytics
Header always set Content-Security-Policy script-src 'self' www.google-analytics.com;
# Disable unsafe inline/eval and plugins, only load scripts and stylesheets from same origin, fonts from google,
#Header always set Content-Security-Policy: default-src 'none'; font-src https://fonts.gstatic.com; img-src 'self' https://i.imgur.com; frame-ancestors 'self';  object-src 'none'; base-uri 'self'; script-src 'strict-dynamic' 'nonce-rAnd0m123' 'unsafe-inline' http: https:; report-uri "https://csp.example.com; style-src 'unsafe-inline'; frame-src 'self'; child-src 'self'; form-action 'self'; media-src 'none'; sandbox allow-forms allow-scripts; worker-src 'none'; plugin-types application/pdf; report-to Firewall-Zei;
Header always set Content-Security-Policy: script-src 'strict-dynamic' 'nonce-rAnd0m123' 'unsafe-inline' http: https:; object-src 'none'; base-uri 'none'; require-trusted-types-for 'script'; report-uri https://csp.example.com;


# Content Security Police
Header always set reporting-endpoints csp-endpoint="https://example.com/csp-reports",hpkp-endpoint="https://example.com/hpkp-reports"
Header always set Content-Security-Policy script-src 'strict-dynamic' 'nonce-rAnd0m123' 'unsafe-inline' http: https:
Header always set Content-Security-Policy default-src 'none';
Header always set Content-Security-Policy style-src 'unsafe-inline'; 
Header always set Content-Security-Policy img-src 'self' https://i.imgur.com;
Header always set Content-Security-Policy connect-src 'self';
Header always set Content-Security-Policy font-src https://fonts.gstatic.com;
Header always set Content-Security-Policy object-src 'none';
Header always set Content-Security-Policy media-src 'none';
Header always set Content-Security-Policy frame-src 'self';
Header always set Content-Security-Policy sandbox allow-forms allow-scripts;
Header always set Content-Security-Policy report-uri "https://csp.example.com;
Header always set Content-Security-Policy child-src 'self';
Header always set Content-Security-Policy form-action 'self';
Header always set Content-Security-Policy frame-ancestors 'self';
Header always set Content-Security-Policy plugin-types application/pdf;
Header always set Content-Security-Policy base-uri 'self';
Header always set Content-Security-Policy report-to Firewall-Zei;
#Header always set Content-Security-Policy: {"max_age":2592000,"endpoints":[{"url":"https:\/\/www.example.com\/browser_reporting\/coop\/?minimize=0"}],"group":"coop_report","include_subdomains":true}, {"max_age":86400,"endpoints":[{"url":"https:\/\/www.example.com\/browser_reporting\/coep\/?minimize=0"}],"group":"coep_report"}, {"max_age":259200,"endpoints":[{"url":"https:\/\/www.example.com\/ajax\/browser_error_reports\/?device_level=unknown&brsid=7390130195501910385"}]}, {"max_age":21600,"endpoints":[{"url":"https:\/\/www.example.com\/ajax\/browser_error_reports\/"}],"group":"permissions_policy"}
Header always set Content-Security-Policy worker-src 'none';
Header always set Content-Security-Policy manifest-src 'none';
Header always set x-fb-connection-quality EXCELLENT; q=0.9, rtt=1, rtx=0, c=10, mss=1380, tbw=3534, tp=-1, tpl=-1, uplat=108, ullat=0
# Don't implement the above policy yet; instead just report violations that would have occurred
#Header always set Content-Security-Policy-Report-Only: default-src https:; report-uri /csp-violation-report-endpoint

# insecure-requests
Header always set Content-Security-Policy "upgrade-insecure-requests"

# The Referrer Policy header
Header always set X-Frame-Options "DENY"
# X-Content-Type-Options
Header always set X-Content-Type-Options: nosniff

# X-XSS-Protection
Header always set X-XSS-Protection: 0
Header always set X-XSS-Protection "0; mode=block"
Header always set X-XSS-Protection: 1; report=<reporting-uri>

# protect all dot files
# protect include  file .php .html .js
#<Files ~ "^.*\.">
#	Order allow,deny
#	Deny from all
#	Satisfy all
# </Files>

Server: Apache/2.4.51
Content-Type: application/json; charset=utf-8
Header always set Access-Control-Allow-Credentials: true
credentials: 'include'
X-Powered-By: Undertow/1
X-Powered-By: Kernel/3.10.0-962.3.2.lve1.5.60.el7.x86_64
Vary: Origin
X-FB-Debug: cKrNlUTUY3PoQaU5FRwgVs3J2vkshGhgdK4lkVSKDeMlNOihnd4vGbQoqPzO6aCfW1nKvW+ABHfI/QVF0iZvGw==
Priority: u=3,i
# Transfer-Encodingadalah header hop-by-hop , yang diterapkan ke pesan antara dua node, bukan ke sumber daya itu sendiri. 
#Setiap segmen koneksi multi-node dapat menggunakan Transfer-Encodingnilai yang berbeda . Jika Anda ingin mengompresi data melalui seluruh koneksi, 
#gunakan Content-Encodingheader ujung-ke-ujung sebagai gantinya.
Transfer-Encoding: chunked
# Compress from unix app program
Accept-Encoding: gzip, deflate
Accept: text/html,application/xhtml+xml,application/xml;q=
path: /
scheme: https

# Access Control Allow Crential on JS
#const xhr = new XMLHttpRequest();
#xhr.open("GET", "http://example.com/", true);
#xhr.withCredentials = true;
#xhr.send(null);


# generated 2021-12-07, Mozilla Guideline v5.6, Apache 2.4.41, OpenSSL 1.1.1k, modern configuration
# https://ssl-config.mozilla.org/#server=apache&version=2.4.41&config=modern&openssl=1.1.1k&guideline=5.6

# this configuration requires mod_ssl, mod_socache_shmcb, mod_rewrite, and mod_headers
<VirtualHost *:80>
    RewriteEngine On
    RewriteCond %{REQUEST_URI} !^/\.well\-known/acme\-challenge/
    RewriteRule ^(.*)$ https://%{example.com}$1 [R=301,L]
    
    # Prevent file. htaccess in domain.com/.htaccess 
    # fast cgi  .cgi fast access htaccess 
RewriteRule ^$ index.html [QSA] 
RewriteRule ^([^.]+)$ $1.html [QSA] 
RewriteCond %{REQUEST_FILENAME} !-F
RewriteRule ^(.*)$ dispatch.fcgi [QSA,L] 
ErrorDocument 500 "<h2>Application error</h2>Aplikasi Rails gagal memulai dengan benar" 
RewriteCond %{HTTP_REFERER} !^http://example.com/.*$ [NC]
</VirtualHost>

# modern configuration
SSLProtocol             all -SSLv3 -TLSv1 -TLSv1.1 -TLSv1.2
SSLHonorCipherOrder     off
SSLSessionTickets       off
SSLUseStapling On
SSLStaplingCache "shmcb:logs/ssl_stapling(32768)"

# generated 2021-12-07, Mozilla Guideline v5.6, MySQL 8.0.19, OpenSSL 1.1.1k, modern configuration
# https://ssl-config.mozilla.org/#server=mysql&version=8.0.19&config=modern&openssl=1.1.1k&guideline=5.6
[mysqld]
require_secure_transport = on
ssl-cert = /path/to/signed_cert_plus_intermediates
ssl-key = /path/to/private_key
tls_version = TLSv1.3

# X-Permitted-Cross-Domain-Policies: none;
Header set X-Permitted-Cross-Domain-Policies "none"

# The Alt-Svc HTTP header allows a server to indicate that a particular resource should be loaded 
# from a different server â€” while still appearing to the user as if were loaded from the same server.

Alt-Svc: clear
alt-svc: h3=":2083"; ma=86400, h3-29=":2083"; ma=86400, h3-28=":2083"; ma=86400, h3-27=":2083"; ma=86400
Alt-Svc: h3=":443"; ma=2592000
Alt-Svc: h3-29=":443"; ma=2592000
Alt-Svc: h3-Q050=":443"; ma=2592000
Alt-Svc: h3-Q046=":443"; ma=2592000
Alt-Svc: h3-Q043=":443"; ma=2592000
Alt-Svc: quic=":443"; ma=2592000; v="46,43"
Alt-Svc: h3=":443"; ma=3600, h3-29=":443"; ma=3600
Content-Length: 226

# The Access-Control-Expose-Headers response header allows a server to indicate which response headers should be made available to scripts running in the browser, in response to a cross-origin request.
Header always set Access-Control-Expose-Headers Content-Encoding
Header always set Access-Control-Expose-Headers *
Header always set Access-Control-Expose-Headers *, Authorization
Header always set Access-Control-Expose-Headers X-FB-Debug, X-Loader-Length

# Subresource Integrity (SRI) Using robots.txt to hide certain directories is a terrible idea
User-agent: *
Disallow: /secret/admin-interface
<!-- Load jQuery 2.1.4 from their CDN -->


######################### Modul Optimeze and Compres File ############################# 
########## Resize and Optimeze Image http://www.imageoptimizer.net/Home.aspx
########## Convert image to webp and AVIF https://www.freeconvert.com/png-to-webp
<FilesMatch "\.(css|flv|gif|htm|html|ico|jpe|jpeg|jpg|js|mp3|mp4|png|pdf|swf|txt)$"> 
<IfModule mod_expires.c> 
ExpiresActive Off 
</IfModule> 
<IfModule mod_headers.c> 
FileETag None 
Header unset ETag 
Header unset Pragma 
Header unset Cache-Control 
Header unset Last-Modified 
Header set Pragma "no-cache" 
Header set Cache-Control: "private, max-age=0, no-cache, no-store, must-revalidate" 
Header set Expires "Thu, 01 Jan 1970 00:00:01" 
</IfModule>
</FilesMatch>

# TN â€“ ENABLE MOD PAGESPEED START       https://www.modpagespeed.com/doc/configuration
# COMBINE CSS, COMPRESS IMAGES, REMOVE HTML WHITE SPACE AND COMMENTS
<IfModule pagespeed_module>
ModPagespeed on
# Honoring Content-Security-Policy Headers #Nginx: pagespeed HonorCsp on;
ModPagespeedHonorCsp on
# Respecting Vary Headers Nginx: pagespeed RespectVary on;
ModPagespeedRespectVary on
# Honoring no-transform Cache-Control Headers #Nginx: pagespeed DisableRewriteOnNoTransform
ModPagespeedDisableRewriteOnNoTransform off
# Lower-casing HTML element and attribute names ðŸ”—  Nginx: pagespeed LowercaseHtmlNames on;
# HTML is case-insensitive, whereas XML and XHTML are not.
ModPagespeedLowercaseHtmlNames on
#Specifying the value for the PageSpeed header # Nginx: pagespeed XHeaderValue "Powered By ngx_pagespeed";
ModPagespeedXHeaderValue "Powered By mod_pagespeed"
# Configuring headers for optimized resources ðŸ”— When creating optimized .pagespeed. resources, PageSpeed generates headers that are correct for most users. However, some users require additional headers. For instance if you're using CORS and you want to have PageSpeed set Access-Control-Allow-Origin: http://www.example.com headers on the resources it creates, you can set:
# Nginx: pagespeed AddResourceHeader "Access-Control-Allow-Origin" "http://www.example.com";
ModPagespeedAddResourceHeader "Access-Control-Allow-Origin" "https://example.com/"
# Preserving HTML caching headers
# By default, PageSpeed serves all HTML with Cache-Control: no-cache, max-age=0
ModPagespeedModifyCachingHeaders off
#Nginx: pagespeed ModifyCachingHeaders off;
#Configuring the location of static assets
ModPagespeedStaticAssetPrefix /custom/static/
# Nginx: pagespeed StaticAssetPrefix /custom/static/;
# https://httpd.apache.org/docs/2.2/mod/mod_proxy.html  Using PageSpeed as a reverse proxy
# Arahkan Apache untuk mengirim semua keluaran HTML ke pengendali keluaran mod_pagespeed.
AddOutputFilterByType MOD_PAGESPEED_OUTPUT_FILTER teks/html
ModPagespeedEnableFilters rewrite_css,combine_css
ModPagespeedEnableFilters recompress_images
ModPagespeedEnableFilters convert_png_to_jpeg,convert_jpeg_to_webp
ModPagespeedEnableFilters collapse_whitespace,remove_comments
</IfModule>
# TN â€“ ENABLE MOD PAGESPEED END
# TN START ENABLE KEEP ALIVE
<ifModule mod_headers.c>
Header set Connection keep-alive
</ifModule>

# TN END ENABLE KEEP ALIVE
# TN â€“ ENABLE LITESPEED CACHE START
<IfModule LiteSpeed>
CacheEnable public
RewriteEngine On
RewriteCond %{REQUEST_METHOD} ^GET|HEAD$
RewriteCond %{HTTP_HOST} ^example.com [NC]
RewriteCond %{REQUEST_URI} !login|admin|register|post|cron
RewriteCond %{QUERY_STRING} !nocache
RewriteRule .* - [E=Cache-Control:max-age=300]
</IfModule>

# TN â€“ ENABLE LITESPEED CACHE END
##### Enable gzip compression for resources 
<ifModule mod_gzip.c> 
mod_gzip_on Yes 
#mod_gzip_dechunk Yes mod_gzip_item_include file .(html?|
mod_gzip_dechunk Yes
mod_gzip_item_include file \.(html?|txt|css|js|php|pl)$
mod_gzip_item_include handler ^cgi-script$
mod_gzip_item_include mime ^text/.*
mod_gzip_item_include mime ^application/x-javascript.*
mod_gzip_item_exclude mime ^image/.*
mod_gzip_item_exclude rspheader ^Content-Encoding:.*gzip.*
</IfModule>
# TN END GZIP COMPRESSION

# TN START DEFLATE COMPRESSION
<IfModule mod_deflate.c>
AddOutputFilterByType DEFLATE "application/atom+xml" \
"application/javascript" \
"application/json" \
"application/ld+json" \
"application/manifest+json" \
"application/rdf+xml" \
"application/rss+xml" \
"application/schema+json" \
"application/vnd.geo+json" \
"application/vnd.ms-fontobject" \
"application/x-font" \
"application/x-font-opentype" \
"application/x-font-otf" \
"application/x-font-truetype" \
"application/x-font-ttf" \
"application/x-javascript" \
"application/x-web-app-manifest+json" \
"application/xhtml+xml" \
"application/xml" \
"font/eot" \
"font/otf" \
"font/ttf" \
"font/opentype" \
"image/bmp" \
"image/svg+xml" \
"image/vnd.microsoft.icon" \
"image/x-icon" \
"text/cache-manifest" \
"text/css" \
"text/html" \
"text/javascript" \
"text/plain" \
"text/vcard" \
"text/vnd.rim.location.xloc" \
"text/vtt" \
"text/x-component" \
"text/x-cross-domain-policy" \
"text/xml"
</IfModule>
# END DEFLATE COMPRESSION

# https://www.danielmorell.com/guides/htaccess-seo/page-speed/speed-up-your-site
##### Optimize default expiration time - BEGIN
 <IfModule mod_expires.c> 
## Enable expiration control 
ExpiresActive On 
## CSS and JS expiration: 1 week after request ExpiresByType text/css "now plus 1 week" ExpiresByType application/javascript "now plus 1 week" 
ExpiresByType application/x-javascript "now plus 1 week" 
## Image files expiration: 1 month after request ExpiresByType image/bmp "now plus 1 month" 
ExpiresByType image/gif "now plus 1 month" ExpiresByType image/jpeg "now plus 1 month" 
ExpiresByType image/jp2 "now plus 1 month" 
ExpiresByType image/pipeg "now plus 1 month" 
ExpiresByType image/png "now plus 1 month" 
ExpiresByType image/svg+xml "now plus 1 month" 
ExpiresByType image/tiff "now plus 1 month" ExpiresByType image/x-icon "now plus 1 month" 
ExpiresByType image/ico "now plus 1 month" ExpiresByType image/icon "now plus 1 month" 
ExpiresByType text/ico "now plus 1 month" ExpiresByType application/ico "now plus 1 month" 
ExpiresByType image/vnd.wap.wbmp "now plus 1 month" 
## Font files expiration: 1 week after request ExpiresByType application/x-font-ttf "now plus 1 week" 
ExpiresByType application/x-font-
opentype "now plus 1 week" 
ExpiresByType application/x-font-woff "now plus 1 week" 
ExpiresByType font/woff2 "now plus 1 week" ExpiresByType image/svg+xml "now plus 1 week" 
## Audio files expiration: 1 month after request 
ExpiresByType audio/ogg "now plus 1 month" 
ExpiresByType application/ogg "now plus 1 month" 
ExpiresByType audio/basic "now plus 1 month" 
ExpiresByType audio/mid "now plus 1 month" 
ExpiresByType audio/midi "now plus 1 month" 
ExpiresByType audio/mpeg "now plus 1 month" 
ExpiresByType audio/mp3 "now plus 1 month" 
ExpiresByType audio/x-aiff "now plus 1 month" 
ExpiresByType audio/x-mpegurl "now plus 1 month" 
ExpiresByType audio/x-pn-realaudio "now plus 1 month"
ExpiresByType audio/x-wav "now plus 1 month" 
## Movie files expiration: 1 month after request ExpiresByType application/x-shockwave-flash "now plus 1 month" ExpiresByType x-world/x-vrml "now plus 1 month" 
ExpiresByType video/x-msvideo "now plus 1 month" 
ExpiresByType video/mpeg "now plus 1 month" 
ExpiresByType video/mp4 "now plus 1 month" 
ExpiresByType video/quicktime "now plus 1 mon"

# Subresource Integrity (SRI) Using robots.txt to hide certain directories is a terrible idea
User-agent: *
Disallow: /secret/admin-interface
<!-- Load jQuery 2.1.4 from their CDN -->


# generated 2021-11-05, Mozilla Guideline v5.6, Apache 2.4.41, OpenSSL 1.1.1k, modern configuration
# https://ssl-config.mozilla.org/#server=apache&version=2.4.41&config=modern&openssl=1.1.1k&guideline=5.6

# modern configuration
SSLProtocol             all -SSLv3 -TLSv1 -TLSv1.1 -TLSv1.2
SSLHonorCipherOrder     off
SSLSessionTickets       off

SSLUseStapling On
SSLStaplingCache "shmcb:logs/ssl_stapling(32768)"


#<!-- A secret anti-CSRF token, included in the form to delete an account -->
#<input type="hidden" name="csrftoken" value="1df93e1eafa42012f9a8aff062eeb1db0380b">
# Server-side: set an anti-CSRF cookie that JavaScript must send as an X header, which can't be done cross-origin
#Set-Cookie: CSRFTOKEN=1df93e1eafa42012f9a8aff062eeb1db0380b; Path=/; Secure; SameSite=Strict
#// Client-side, have JavaScript add it as an X header to the XMLHttpRequest    Set in JavaScript
#var token = readCookie(CSRFTOKEN);                   // read the cookie
#httpRequest.setRequestHeader('X-CSRF-Token', token); // add it as an X-CSRF-Token header


# Server-side: set an anti-CSRF cookie that JavaScript must send as an X header, which can't be done cross-origin
Set-Cookie: CSRFTOKEN=f0306814b7a732eab2299bacabd65fc143df26f63cd70754010fbb4f34aa7af2; Path=/; Secure; SameSite=Strict
# Cookie with __Host- prefix
Set-Cookie: __Host-token=9G5NPF0K14FGFOQD286BJPW7BG7BQXX1; path=/; Secure
# Session identifier cookie only accessible on this host that gets purged when the user closes their browser
Set-Cookie: MOZSESSIONID=980e5da39d4b472b9f504cac9; Path=/; Secure; HttpsOnly
# Session identifier for all mozilla.org sites that expires in 30 days using the __Secure- prefix
# This cookie is not sent cross-origin, but is sent when navigating to any Mozilla site from from another site
Set-Cookie: __Secure-MOZSESSIONID=7307d70a86bd4ab5a00499762; Max-Age=2592000; Domain=https://example.com; Path=/; Secure; HttpsOnly; SameSite=Lax
# Sets a long-lived cookie for the current host, accessible by Javascript, when the user accepts the ToS
# This cookie is sent when navigating to your sent from another site, such as by clicking a link
Set-Cookie: __Host-ACCEPTEDTOS=true; Expires=Fri, 31 Dec 2024 23:59:59 GMT; Path=/; Secure; SameSite=Lax
# Session identifier used for a secure site, such as bugzilla.mozilla.org. It isn't sent from cross-origin
# requests, nor is it sent when navigating to bugzilla.mozilla.org from another site. Used in conjunction with
# other anti-CSRF measures, this is a very strong way to defend your site against CSRF attacks.
Set-Cookie: __Host-BMOSESSIONID=YnVnemlsbGE=; Max-Age=2592000; Path=/; Secure; HttpsOnly; SameSite=Strict

# Disable unsafe inline/eval, only load resources from same origin except also allow images from imgur
# Disable unsafe inline/eval and plugins, only load scripts and stylesheets from same origin, fonts from google,
# and images from same origin and imgur. Sites should aim for policies like this.
#Header always set Content-Security-Policy: default-src 'none'; font-src https://fonts.gstatic.com; img-src 'self' https://i.imgur.com; object-src 'unsafe-inline'; script-src 'unsafe-inline'; style-src 'self'
# Pre-existing site that uses too much inline code to fix
# but wants to ensure resources are loaded only over https and disable plugins
#Header always set Content-Security-Policy: default-src https: 'unsafe-eval' 'unsafe-inline'; object-src 'unsafe-inline'
# Don't implement the above policy yet; instead just report violations that would have occurred
#Header always set Content-Security-Policy-Report-Only: default-src https:; report-uri /csp-violation-report-endpoint
# Disable the loading of any resources and disable framing, recommended for APIs to use

# Access-Control-Allow-Origin Allow Link Address
# Allow any site to read the contents of this JavaScript library, so that subresource integrity works
Header always set Access-Control-Allow-Origin: true
# Allow https://random-dashboard.mozilla.org to read the returned results of this API
Access-Control-Allow-Origin: https://random-dashboard.mozilla.org
# Allow https://random-dashboard.mozilla.org to read the returned results of this API

Header always set Access-Control-Allow-Origin: https://mylivechat.com/chatinline.aspx?hccid=24515119
Header always set Access-Control-Allow-Origin: https://uk.mylivechat.com/livechat2/livechat2.aspx?hccid=24515119&apimode=chatinline
Header always set Access-Control-Allow-Origin: https://api-public.addthis.com/
Header always set Access-Control-Allow-Origin: https://s7.addthis.com/js/300/addthis_widget.js#pubid=ra-613e311bf84f5c82
Header always set Access-Control-Allow-Origin: https://s7.addthis.com/js/300/addthis_widget.js#pubid=ra-613e32eb7b61492e
Header always set Access-Control-Allow-Origin: https://api.whatsapp.com/send/?phone=%2B6287734218329&text=Hello+Baby+Fit+Organic+-+Apa+kabar.&app_absent=0
Header always set Access-Control-Allow-Origin: https://api-public.addthis.com/url/serviceapi/shares-post.json?services=sFbt&url=https%3A%2F%2Fexample.com%2F%3F__cf_chl_jschl_tk__%3DyoXK1ALm5HpenwrgbrHmrJC_eFOT4fsm9CLkBo_WXXQ-1636075170-0-gaNycGzNCNE
Header always set Access-Control-Allow-Origin: https://wa.me/+6287734218329?text=Hello Baby Fit Organic - Apa kabar.
Header always set Access-Control-Allow-Origin: https://www.freevisitorcounters.com/en/home/stats/id/880848
Header always set Access-Control-Allow-Origin: https://www.freevisitorcounters.com/auth.php?id=f4b9b1e10cd4a87fdccb267bd4e548fd292ba5fc
Header always set Access-Control-Allow-Origin: https://static.cloudflareinsights.com/beacon.min.js
Header always set Access-Control-Allow-Origin: https://cdn.sitesearch360.com/v13/sitesearch360-v13.min.js
Header always set Access-Control-Allow-Origin: https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.js
Header always set Access-Control-Allow-Origin: https://cdnjs.cloudflare.com/ajax/libs/what-input/5.0.2/what-input.js
Header always set Access-Control-Allow-Origin: https://cdnjs.cloudflare.com/ajax/libs/foundation/6.4.3/js/foundation.js
Header always set Access-Control-Allow-Origin: https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.7.1/slick.js
Header always set Access-Control-Allow-Origin: https://unpkg.com/scrollreveal/dist/scrollreveal.min.js
Header always set Access-Control-Allow-Origin: https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js
Header always set Access-Control-Allow-Origin: https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-6349150931217712
Header always set Access-Control-Allow-Origin: https://cdnjs.cloudflare.com/ajax/libs/what-input/5.0.2/what-input.js
Header always set Access-Control-Allow-Origin: https://example.com/js/app.js
Header always set Access-Control-Allow-Origin: https://example.com/css/app.css
Header always set Access-Control-Allow-Origin: https://code.jquery.com/jquery-2.1.4.min.js
Header always set Access-Control-Allow-Origin: https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js
Header always set Access-Control-Allow-Origin: https://example.com/firewall/clientaccesspolicy.xml
Header always set Access-Control-Allow-Origin: https://example.com/firewall/contribute.json
Header always set Access-Control-Allow-Origin: https://code.jquery.com/jquery-1.12.0.min.js
Header always set Access-Control-Allow-Origin: http://code.jquery.com/jquery-1.12.0.min.js
Header always set Access-Control-Allow-Origin: https://unpkg.com/scrollreveal@4.0.0-beta.6
Header always set Access-Control-Allow-Origin: https://api.whatsapp.com/send/?phone=%2B6285201219393&text=Halo+Kak+Novita%2C+Saya+Ingin+Order+Buah+Kak%2C+Mohon+Informasinya.&app_absent=0
Header always set Access-Control-Allow-Origin: https://unpkg.com/scrollreveal@4.0.0-beta.6/dist/scrollreveal.js

# Access-Control-Allow-Origin Allow Font
Header always set Access-Control-Allow-Origin: https://fonts.googleapis.com/css?family=Merriweather:600,300,300i&subset=latin-ext
Header always set Access-Control-Allow-Origin: https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.7.1/slick.css
Header always set Access-Control-Allow-Origin: https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.7.1/slick-theme.css
Header always set Access-Control-Allow-Origin: 'origin-list'


enum ReferrerPolicy {
"",
"no-referrer",
"no-referrer-when-downgrade",
"same-origin",
"origin",
"strict-origin",
"origin-when-cross-origin",
"strict-origin-when-cross-origin",
"unsafe-url"
};




#API Permission
Header always set "permissions": ["*://developer.mozilla.org/*"]
Header always set "permissions": ["tabs"]
Header always set "permissions": ["*://developer.mozilla.org/*", "tabs"]

Access-Control-Allow-Methods: GET, DELETE, HEAD, OPTIONS
fetch('https://cors-demo.glitch.me/allow-cors', {mode:'cors'})

fetch('https://example.com/?__cf_chl_jschl_tk__=pmd_YEzENWE7.cZaQm7r7rJpH5t2.tP7gDe7B0QqKjS6A_M-1635211668-0-gqNtZGzNAhCjcnBszQh9', {
  mode: 'cors',
  credentials: 'include'
})


RewriteEngine On                 
RewriteCond %{REQUEST_METHOD} OPTIONS 
RewriteRule ^(.*)$ $1 [R=200,L]
# Protection index.html
RewriteBase /
RewriteRule ^example.com/index\.html$ / [NC,R,L]

Header set Access-Control-Allow-Methods "POST, GET, OPTIONS" 


var sanitizer = new HtmlSanitizer();
sanitizer.AllowedAttributes.Add("class");
var sanitized = sanitizer.Sanitize(html);


#Header HTTP Strict Transport Security (HSTS)
server {
  listen 80;

  return 301 https://$host$request_uri;
}

# Stric-Transport-Security
Header always set Stric-Transport-Security: "max-age=31536000" env=HTTPS


# Referrer-Policy
#Header always set Referrer-Policy: "no-referrer-when-downgrade"
Header always set Referrer-Policy: "strict-origin-when-cross-origin"

# XSS-Protectio Apache (.htaccess)
<IfModule mod_headers.c>
  Header set X-XSS-Protection "1; mode=block"
</IfModule>

# Permission Police
 Header always set Permissions-Policy: picture-in-picture=(), geolocation=(self "https://example.com"), microphone=(), display-capture=();, camera=*;
# Header always set Permissions-Policy: We detected an invalid directive, " attribution-reporting". We detected an invalid directive, " ch-device-memory". We detected an invalid directive, " ch-downlink". We detected an invalid directive, " ch-ect". We detected an invalid directive, " ch-rtt". We detected an invalid directive, " ch-ua-arch". We detected an invalid directive, " ch-ua-bitness". We detected an invalid directive, " ch-viewport-height". We detected an invalid directive, " compute-pressure". We detected an invalid directive, " otp-credentials". We detected an invalid directive, " private-state-token-issuance". We detected an invalid directive, " shared-storage". We detected an invalid directive, " shared-storage-select-url". We detected an invalid directive, " private-state-token-redemption". We detected an invalid directive, " usb-unrestricted". We detected an invalid directive, " window-management".

Options +FollowSymLinks
RewriteEngine On
RewriteCond %{QUERY_STRING} (\<|%3C).*script.*(\>|%3E) [NC,OR]
RewriteCond %{QUERY_STRING} GLOBALS(=|\[|\%[0-9A-Z]{0,2}) [OR]
RewriteCond %{QUERY_STRING} _REQUEST(=|\[|\%[0-9A-Z]{0,2})
RewriteRule ^(.*)$ index.php [F,L]
# SQL Injection Protection
RewriteEngine On
RewriteRule ^.*EXEC\(@.*$        - [R=404,L,NC]
RewriteRule ^.*CAST\(.*$         - [R=404,L,NC] 
RewriteRule ^.*DECLARE.*$        - [R=404,L,NC]  
RewriteRule ^.*DECLARE%20.*$     - [R=404,L,NC]
RewriteRule ^.*NVARCHAR.*$       - [R=404,L,NC]  
RewriteRule ^.*sp_password.*$    - [R=404,L,NC]
RewriteRule ^.*%20xp_.*$         - [R=404,L,NC]
# Block MySQL injections, RFI, base64, etc.
RewriteEngine On
RewriteCond %{QUERY_STRING} [a-zA-Z0-9_]=http:// [OR]
RewriteCond %{QUERY_STRING} [a-zA-Z0-9_]=(\.\.//?)+ [OR]
RewriteCond %{QUERY_STRING} [a-zA-Z0-9_]=/([a-z0-9_.]//?)+ [NC,OR]
RewriteCond %{QUERY_STRING} \=PHP[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12} [NC,OR]
RewriteCond %{QUERY_STRING} (\.\./|\.\.) [OR]
RewriteCond %{QUERY_STRING} ftp\: [NC,OR]
RewriteCond %{QUERY_STRING} http\: [NC,OR]
RewriteCond %{QUERY_STRING} https\: [NC,OR]
RewriteCond %{QUERY_STRING} \=\|w\| [NC,OR]
RewriteCond %{QUERY_STRING} ^(.*)/self/(.*)$ [NC,OR]
RewriteCond %{QUERY_STRING} ^(.*)cPath=http://(.*)$ [NC,OR]
RewriteCond %{QUERY_STRING} (\<|%3C).*script.*(\>|%3E) [NC,OR]
RewriteCond %{QUERY_STRING} (<|%3C)([^s]*s)+cript.*(>|%3E) [NC,OR]
RewriteCond %{QUERY_STRING} (\<|%3C).*iframe.*(\>|%3E) [NC,OR]
RewriteCond %{QUERY_STRING} (<|%3C)([^i]*i)+frame.*(>|%3E) [NC,OR]
RewriteCond %{QUERY_STRING} base64_encode.*\(.*\) [NC,OR]
RewriteCond %{QUERY_STRING} base64_(en|de)code[^(]*\([^)]*\) [NC,OR]
RewriteCond %{QUERY_STRING} GLOBALS(=|\[|\%[0-9A-Z]{0,2}) [OR]
RewriteCond %{QUERY_STRING} _REQUEST(=|\[|\%[0-9A-Z]{0,2}) [OR]
RewriteCond %{QUERY_STRING} ^.*(\[|\]|\(|\)|<|>).* [NC,OR]
RewriteCond %{QUERY_STRING} (NULL|OUTFILE|LOAD_FILE) [OR]
RewriteCond %{QUERY_STRING} (\./|\../|\.../)+(motd|etc|bin) [NC,OR]
RewriteCond %{QUERY_STRING} (localhost|loopback|127\.0\.0\.1) [NC,OR]
RewriteCond %{QUERY_STRING} (<|>|'|%0A|%0D|%27|%3C|%3E|%00) [NC,OR]
RewriteCond %{QUERY_STRING} concat[^\(]*\( [NC,OR]
RewriteCond %{QUERY_STRING} union([^s]*s)+elect [NC,OR]
RewriteCond %{QUERY_STRING} union([^a]*a)+ll([^s]*s)+elect [NC,OR]
RewriteCond %{QUERY_STRING} (;|<|>|'|"|\)|%0A|%0D|%22|%27|%3C|%3E|%00).*(/\*|union|select|insert|drop|delete|update|cast|create|char|convert|alter|declare|order|script|set|md5|benchmark|encode) [NC,OR]
RewriteCond %{QUERY_STRING} (sp_executesql) [NC]
RewriteRule ^(.*)$ - [F,L]

# 5G BLACKLIST/FIREWALL (2013)
# @ http://perishablepress.com/5g-blacklist-2013/

# 5G:[QUERY STRINGS]
<IfModule mod_rewrite.c>
    RewriteEngine On
    RewriteBase /
    RewriteCond %{QUERY_STRING} (\"|%22).*(<|>|%3) [NC,OR]
    RewriteCond %{QUERY_STRING} (javascript:).*(\;) [NC,OR]
    RewriteCond %{QUERY_STRING} (<|%3C).*script.*(>|%3) [NC,OR]
    RewriteCond %{QUERY_STRING} (\\|\.\./|`|=\'$|=%27$) [NC,OR]
    RewriteCond %{QUERY_STRING} (\;|\'|\"|%22).*(union|select|insert|drop|update|md5|benchmark|or|and|if) [NC,OR]
    RewriteCond %{QUERY_STRING} (base64_encode|localhost|mosconfig) [NC,OR]
    RewriteCond %{QUERY_STRING} (boot\.ini|echo.*kae|etc/passwd) [NC,OR]
    RewriteCond %{QUERY_STRING} (GLOBALS|REQUEST)(=|\[|%) [NC]
    RewriteRule .* - [F]


# 5G:[USER AGENTS]
<IfModule mod_setenvif.c>
    # SetEnvIfNoCase User-Agent ^$ keep_out
    SetEnvIfNoCase User-Agent (binlar|casper|cmsworldmap|comodo|diavol|dotbot|feedfinder|flicky|ia_archiver|jakarta|kmccrew|nutch|planetwork|purebot|pycurl|skygrid|sucker|turnit|vikspider|zmeu) keep_out
    <limit GET POST PUT>
  Order Allow,Deny
  Allow from all
  Deny from env=keep_out
    </limit>
</IfModule>



# Measures to block out  SQL injection attacks 
#RewriteCond %{QUERY_STRING} ^.*(;|<|>|'|"|\)|%0A|%0D|%22|%27|%3C|%3E|%00).*(/\*|union|select|insert|cast|set|declare|drop|update|md5|benchmark).* [NC,OR]

RewriteEngine On 
 ########## Begin - Rewrite rules to block out some common exploits
 ## If you experience problems on your site block out the operations listed below
 ## This attempts to block the most common type of exploit `attempts` to Joomla!
 #
 # Block out any script trying to set a mosConfig value through the URL
 RewriteCond %{QUERY_STRING} mosConfig_[a-zA-Z_]{1,21}(=|\%3D) [OR]
 # Block out any script trying to base64_encode crap to send via URL
 RewriteCond %{QUERY_STRING} base64_encode.*\(.*\) [OR]
 # Block out any script that includes a <script> tag in URL
 RewriteCond %{QUERY_STRING} (\<|%3C).*script.*(\>|%3E) [NC,OR]
 # Block out any script trying to set a PHP GLOBALS variable via URL
 RewriteCond %{QUERY_STRING} GLOBALS(=|\[|\%[0-9A-Z]{0,2}) [OR]
 # Block out any script trying to modify a _REQUEST variable via URL
 RewriteCond %{QUERY_STRING} _REQUEST(=|\[|\%[0-9A-Z]{0,2})
 
 #
 ########## End - Rewrite rules to block out some common exploits
 
 #  Uncomment following line if your webserver's URL
 #  is not directly related to physical file paths.
 #  Update Your Joomla! Directory (just / for root)
 
 # RewriteBase /

# BEGIN cPanel-generated php ini directives, do not edit
# Manual editing of this file may result in unexpected behavior.
# To make changes to this file, use the cPanel MultiPHP INI Editor (Home >> Software >> MultiPHP INI Editor)
# For more information, read our documentation (https://go.cpanel.net/EA4ModifyINI)
<IfModule php8_module>
   php_flag display_errors On
   php_value max_execution_time 30
   php_value max_input_time 60
   php_value max_input_vars 1000
   php_value memory_limit 512M
   php_value post_max_size 70M
   php_value session.gc_maxlifetime 1440
   php_value session.save_path "/var/cpanel/php/sessions/ea-php81"
   php_value upload_max_filesize 2M
   php_flag zlib.output_compression On
</IfModule>
<IfModule lsapi_module>
   php_flag display_errors On
   php_value max_execution_time 30
   php_value max_input_time 60
   php_value max_input_vars 1000
   php_value memory_limit 512M
   php_value post_max_size 70M
   php_value session.gc_maxlifetime 1440
   php_value session.save_path "/var/cpanel/php/sessions/ea-php81"
   php_value upload_max_filesize 2M
   php_flag zlib.output_compression On
</IfModule>
# END cPanel-generated php ini directives, do not edit
#</FilesMatch>

# php -- BEGIN cPanel-generated handler, do not edit
# Set the “alt-php73” package as the default “PHP” programming language.
<IfModule mime_module>
  AddHandler application/x-httpd-alt-php73 .php .php7 .phtml
</IfModule>
# php -- END cPanel-generated handler, do not edit
